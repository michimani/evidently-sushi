// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.7.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Error defines model for Error.
type Error struct {

	// error message
	Message string `json:"message"`
}

// Feature defines model for Feature.
type Feature struct {

	// used entity ID
	EntityId *string `json:"entityId,omitempty"`

	// feature name
	Name *string `json:"name,omitempty"`

	// valiation reason
	Reason *string `json:"reason,omitempty"`

	// value of feature valiation
	Value *string `json:"value,omitempty"`
}

// EvaluateFeatureParams defines parameters for EvaluateFeature.
type EvaluateFeatureParams struct {

	// A specific entity
	EntityId *string `json:"entity_id,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// call Evidently:EvaluateFeature
	// (GET /features/evaluate)
	EvaluateFeature(w http.ResponseWriter, r *http.Request, params EvaluateFeatureParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// EvaluateFeature operation middleware
func (siw *ServerInterfaceWrapper) EvaluateFeature(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params EvaluateFeatureParams

	// ------------- Optional query parameter "entity_id" -------------
	if paramValue := r.URL.Query().Get("entity_id"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "entity_id", r.URL.Query(), &params.EntityId)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter entity_id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.EvaluateFeature(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/features/evaluate", wrapper.EvaluateFeature)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/4RTTW/bMAz9KwK3YxBn22XQsEOxtUCww3rboSgGQqZrDbakklTQoPB/HyQ7KdoY28m0",
	"+PH4+MhncHFMMVBQAfsM4noasZrXzJGLkTgmYvVUn0cSwQcqZkvi2Cf1MYAFKvHm5N6AHhOBBVH24QGm",
	"aQNMj9kztWDvzmXupw3cEGpmusSioF6P+/YSLAu1Znab/fdLtA0EHFea7GYoU70rWUwoJfBt3gEHj8U2",
	"S8RK7gGHTKupmUzszAn7XGtlSFOZkw9dvKxzdbs32qMadCoGxaBJHJ+ORqPRnsy3Ieb2F6rrzfXBtxR0",
	"OJqr231B8TpUmCy9P/cx+w7EMgPsth+2u0IkJgqYPFj4tN1td7CBhNpXRZolWRoqvFAr4QfSlX1YAk54",
	"UAtzZV4khesl4ObsT8g4khIL2LsL/kYSOd95twgPZVJg4TETl59Z8WVpfvsWNss6l97eDvq+aC0pBplX",
	"7eNuVz4uBqVQ2WBKg3e13eaPxPDFuB5ZSL9m7T6/HEuxvNJYy7xn6sDCu+blrJrlppoTz+ksOzLjEarm",
	"r7n+/AH1rcM86H/6et3JvxqYL3oFTuJIpt6v1EOVPI7IR7DgcBhe1sm+lazWEuLDSbLMA1joVZPYpqEn",
	"HNNAWxfHBpNvYLqf/gYAAP//e9DxiHIEAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
